//maze in C

#include <stdio.h>

#define SIZE 12

void mazeTraverse(char maze[SIZE][SIZE], int row, int col);

int main() {
    char maze[SIZE][SIZE] = {
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
        {'#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#'},
        {'.', '.', '#', '.', '#', '.', '#', '#', '#', '#', '.', '#'},
        {'#', '#', '#', '.', '#', '.', '.', '.', '.', '#', '.', '#'},
        {'#', '.', '.', '.', '.', '#', '#', '#', '.', '#', '.', '#'},
        {'#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#'},
        {'#', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#'},
        {'#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#'},
        {'#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#'},
        {'#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#'},
        {'#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'},
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
    };

    mazeTraverse(maze, 3, 0); // Start at row 2, column 0

    return 0;
}

void mazeTraverse(char maze[SIZE][SIZE], int row, int col) {
    // Base case: if the current position is outside the maze or is a wall, return
    if (row < 0 || row >= SIZE || col < 0 || col >= SIZE || maze[row][col] == '#') {
        return;
    }

    // Base case: if the current position is the exit, mark it with 'X' and return
    if (row == SIZE - 1 && col == SIZE - 1) {
        maze[row][col] = 'X';
        printf("Maze solved!\n");
        return;
    }

    // Recursive case: mark the current position with 'X'
    maze[row][col] = 'X';

    // Display the maze
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", maze[i][j]);
        }
        printf("\n");
    }
    printf("\n");

    // Recursive case: try moving in all four directions (up, down, left, right)
    mazeTraverse(maze, row - 1, col); // Up
    mazeTraverse(maze, row + 1, col); // Down
    mazeTraverse(maze, row, col - 1); // Left
    mazeTraverse(maze, row, col + 1); // Right

    // If none of the above recursive calls find the exit, backtrack by marking the current position with '.'
    maze[row][col] = '.';
}